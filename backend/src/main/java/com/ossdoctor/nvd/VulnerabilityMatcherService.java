package com.ossdoctor.nvd;

import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;
import java.util.*;

public class VulnerabilityMatcherService {

    private final NvdClient nvdClient;

    public static class MatchResult {
        public final Dependency dependency;
        public final String cpe;
        public final List<JsonNode> cves; // 원본 NVD 노드(요약/스코어 등은 호출부에서 가공)

        public MatchResult(Dependency dependency, String cpe, List<JsonNode> cves) {
            this.dependency = dependency;
            this.cpe = cpe;
            this.cves = cves;
        }
    }

    public VulnerabilityMatcherService(NvdClient nvdClient) {
        this.nvdClient = nvdClient;
    }

    public List<MatchResult> findVulnerabilities(List<Dependency> deps) throws IOException, InterruptedException {
        List<MatchResult> results = new ArrayList<>();
        for (Dependency dep : deps) {
            List<String> candidates = CpeCandidateBuilder.buildCandidates(dep);
            // 후보별로 조회, 첫 성공 후보를 채택(실무: 스코어링/병합)
            for (String cpe : candidates) {
                List<JsonNode> vulns = nvdClient.getVulnsByCpe(cpe, true, "HIGH,CRITICAL", 500);
                // 추가 검증: configurations의 버전 범위 포함 여부 확인
                List<JsonNode> filtered = new ArrayList<>();
                for (JsonNode v : vulns) {
                    JsonNode cve = v.path("cve");
                    JsonNode configs = cve.path("configurations");
                    boolean ok = configurationsMatch(configs, dep.getVersion(), cpe);
                    if (ok) filtered.add(v);
                }
                if (!filtered.isEmpty()) {
                    results.add(new MatchResult(dep, cpe, filtered));
                    break; // 다음 의존성으로
                }
            }
        }
        return results;
    }

    private boolean configurationsMatch(JsonNode configurations, String version, String cpeName) {
        // 매우 단순화: cpeMatch[].cpeName 일치 + 버전 포함 여부 확인
        if (!configurations.isArray()) return true; // 일부 레코드는 비어있을 수 있음
        for (JsonNode node : configurations) {
            JsonNode nodes = node.path("nodes");
            for (JsonNode n : nodes) {
                JsonNode matches = n.path("cpeMatch");
                for (JsonNode m : matches) {
                    String cpe = m.path("criteria").asText(m.path("cpeName").asText(""));
                    boolean vulnerable = m.path("vulnerable").asBoolean(true);
                    if (!vulnerable) continue;
                    if (cpe.equalsIgnoreCase(cpeName)) {
                        if (NvdClient.versionIncluded(m, version)) return true;
                    }
                }
            }
        }
        return false;
    }
}
